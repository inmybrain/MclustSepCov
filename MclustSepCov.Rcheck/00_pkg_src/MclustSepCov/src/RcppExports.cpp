// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// getCovariance
arma::mat getCovariance(int q, double rho, std::string type);
RcppExport SEXP _MclustSepCov_getCovariance(SEXP qSEXP, SEXP rhoSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(getCovariance(q, rho, type));
    return rcpp_result_gen;
END_RCPP
}
// LB_algorithm_cpp
Rcpp::List LB_algorithm_cpp(double a, arma::mat Z, std::string type, double rho0, double lambda, int maxit);
RcppExport SEXP _MclustSepCov_LB_algorithm_cpp(SEXP aSEXP, SEXP ZSEXP, SEXP typeSEXP, SEXP rho0SEXP, SEXP lambdaSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type rho0(rho0SEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(LB_algorithm_cpp(a, Z, type, rho0, lambda, maxit));
    return rcpp_result_gen;
END_RCPP
}
// Mclust_SEP_each_cpp
Rcpp::List Mclust_SEP_each_cpp(arma::mat Y, int p, int q, int K, std::string type_vari, std::string type_time, double tol, int maxit);
RcppExport SEXP _MclustSepCov_Mclust_SEP_each_cpp(SEXP YSEXP, SEXP pSEXP, SEXP qSEXP, SEXP KSEXP, SEXP type_variSEXP, SEXP type_timeSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< std::string >::type type_vari(type_variSEXP);
    Rcpp::traits::input_parameter< std::string >::type type_time(type_timeSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(Mclust_SEP_each_cpp(Y, p, q, K, type_vari, type_time, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MclustSepCov_getCovariance", (DL_FUNC) &_MclustSepCov_getCovariance, 3},
    {"_MclustSepCov_LB_algorithm_cpp", (DL_FUNC) &_MclustSepCov_LB_algorithm_cpp, 6},
    {"_MclustSepCov_Mclust_SEP_each_cpp", (DL_FUNC) &_MclustSepCov_Mclust_SEP_each_cpp, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_MclustSepCov(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
