% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{Optimization}
\alias{Optimization}
\alias{LB_algorithm_cpp}
\title{Newton-Raphson's algorithm to find the optimal temporal correlation}
\usage{
LB_algorithm_cpp(a, Z, type, rho0, lambda = 1, maxit = 500L)
}
\arguments{
\item{a}{A positive constant. See `Details'.}

\item{Z}{A matrix of sample vectors at row.}

\item{type}{A character string indicating a type of temporal covariance matrix. Available options are \code{'AR'} and \code{'CS'}.}

\item{rho0}{An initial value for the temporal correlation coefficient. We empirically found that 0.001 works well for \code{type='AR'} and 0.5 for \code{type='CS'}.}

\item{lambda}{A positive constant multiplied to the log-barrier term. Default is 1.}

\item{maxit}{The maximum number for iterations. Default is 500.}
}
\description{
Solve the constrained minimization problem using the log-barrier method to find the maximum likelihood estimator (MLE) of temporal correlation. The objective function is described in `Details'.
}
\details{
The objective function is divided into two parts; the Gaussian log-likelihood function (up to constant multiplication) with mean 0 and covariance matrix \eqn{\Sigma = \Sigma(\rho)} and the log-barrier function. The former is written by 
\deqn{h(\rho; a, Z) = a \log|\Sigma| + {\rm tr}(\Sigma^{-1} S),}
where \eqn{a>0} and \eqn{S = Z^{\rm T} Z}, and the latter is
\deqn{b(\rho; u, l) = \log(u - \rho) + \log(\rho - l),}
where \eqn{u,l} is an upper and a lower bound of \eqn{\rho}, respectively. These quantities depend on \code{type} as follows;
\itemize{
  \item If \code{type='AR'}, \eqn{\Sigma= \big(\rho^{|i-j|}; 1\le i,j \le q\big)} and  \eqn{l=-1, u=1},
  \item if \code{type='CS'}, \eqn{\Sigma = \big({\rm I}(i=j) + \rho {\rm I}(i \neq j); 1\le i,j \le q\big)} and \eqn{l=-1/\sqrt{q-1}, u=1},
}
where \eqn{q=}\code{ncol(Z)}. The objective function is, hence,
\deqn{h(\rho; a, Z) - \lambda ~ b(\rho; u, l).}
}
\examples{
q <- 10
# AR model
set.seed(6)
Y <- mvtnorm::rmvnorm(100, rep(0, q), getCovariance(q, 0.3, "AR"))
LB_algorithm_cpp(a = nrow(Y), Z = Y, rho0 = 1e-3, type = "AR")

# CS model
set.seed(6)
Y <- mvtnorm::rmvnorm(100, rep(0, q), getCovariance(q, 0.3, "CS"))
LB_algorithm_cpp(a = nrow(Y), Z = Y, rho0 = 1e-3, type = "CS")
}
