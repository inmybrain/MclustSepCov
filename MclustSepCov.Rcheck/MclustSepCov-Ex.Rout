
R version 3.5.0 (2018-04-23) -- "Joy in Playing"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "MclustSepCov"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('MclustSepCov')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Mclust_SEP_cpp")
> ### * Mclust_SEP_cpp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Mclust_SEP_cpp
> ### Title: The model-based clustering for longitudinal data
> ### Aliases: Mclust_SEP_cpp
> 
> ### ** Examples
> 
> # Gaussian mixture model with two components
> K <- 2
> p <- 2
> q <- 3
> U <- lapply(1:K, function(noarg) getCovariance(p, 0.3, "AR"))
> V <- lapply(1:K, function(noarg) getCovariance(q, 0.2, "CS"))
> Sigma <- Map(kronecker, U, V) # separable covariance matrix
> mu <- list(rep(0, p * q), 5 / sqrt(p*q) * rep(1, p * q)) # distinct mean vectors
> Y <- vector(mode = "list", length = K)
> for(i in 1:K){
+   Y[[i]] <- mvtnorm::rmvnorm(n = 20, mean = mu[[i]], sigma = Sigma[[i]])
+ }
> fit <- Mclust_SEP_cpp(Y = Reduce(rbind, Y), p = p, q = q, Ks = 2, type_cov = "EEE-ECS")
Mclust_SEP_cpp is done!
> 
> 
> 
> cleanEx()
> nameEx("Mclust_SEP_each_cpp")
> ### * Mclust_SEP_each_cpp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Mclust_SEP_each_cpp
> ### Title: The maximum likelihood estimation of the mixture distribution
> ### Aliases: Mclust_SEP_each_cpp
> 
> ### ** Examples
> 
> # Gaussian mixture model with two components
> K <- 2
> p <- 2
> q <- 3
> U <- lapply(1:K, function(noarg) getCovariance(p, 0.3, "AR"))
> V <- lapply(1:K, function(noarg) getCovariance(q, 0.2, "CS"))
> Sigma <- Map(kronecker, U, V) # separable covariance matrix
> mu <- list(rep(0, p * q), 5 / sqrt(p*q) * rep(1, p * q)) # distinct mean vectors
> Y <- vector(mode = "list", length = K)
> for(i in 1:K){
+   Y[[i]] <- mvtnorm::rmvnorm(n = 20, mean = mu[[i]], sigma = Sigma[[i]])
+ }
> fit <- Mclust_SEP_each_cpp(Y = Reduce(rbind, Y), p = p, q = q, K = 2, type_vari = "EEE", type_time = "ECS")
> 
> 
> 
> cleanEx()
> nameEx("Optimization")
> ### * Optimization
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Optimization
> ### Title: Newton-Raphson's algorithm to find the optimal temporal
> ###   correlation
> ### Aliases: Optimization LB_algorithm_cpp
> 
> ### ** Examples
> 
> q <- 10
> # AR model
> set.seed(6)
> Y <- mvtnorm::rmvnorm(100, rep(0, q), getCovariance(q, 0.3, "AR"))
> LB_algorithm_cpp(a = nrow(Y), Z = Y, rho0 = 1e-3, type = "AR")
$value
[1] 932.4531

$rho
[1] 0.2662166

$iter
[1] 500

$conv
[1] 0

> 
> # CS model
> set.seed(6)
> Y <- mvtnorm::rmvnorm(100, rep(0, q), getCovariance(q, 0.3, "CS"))
> LB_algorithm_cpp(a = nrow(Y), Z = Y, rho0 = 1e-3, type = "CS")
$value
[1] 827.2598

$rho
[1] 0.2673172

$iter
[1] 500

$conv
[1] 0

> 
> 
> 
> cleanEx()
> nameEx("getCovariance")
> ### * getCovariance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCovariance
> ### Title: Generate temporal covariance matrices
> ### Aliases: getCovariance
> 
> ### ** Examples
> 
> getCovariance(3, 0.3, "AR") # AR
     [,1] [,2] [,3]
[1,] 1.00  0.3 0.09
[2,] 0.30  1.0 0.30
[3,] 0.09  0.3 1.00
> getCovariance(3, 0.3, "CS") # CS
     [,1] [,2] [,3]
[1,]  1.0  0.3  0.3
[2,]  0.3  1.0  0.3
[3,]  0.3  0.3  1.0
> 
> # AR structure with heterogeneous variances
> hvar <- c(1, 2, 3) # variances
> diag(sqrt(hvar)) %*% getCovariance(3, 0.3, "AR") %*% diag(sqrt(hvar))
          [,1]      [,2]      [,3]
[1,] 1.0000000 0.4242641 0.1558846
[2,] 0.4242641 2.0000000 0.7348469
[3,] 0.1558846 0.7348469 3.0000000
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.4 0.017 0.421 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
